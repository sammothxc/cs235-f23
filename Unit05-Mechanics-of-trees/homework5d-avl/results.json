{
    "tests": [
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test1_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test1_insert[insert-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.5,
            "max_score": 0.5,
            "name": "test_avl.py::test1_insert[tree-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test1_insert[insert-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.5,
            "max_score": 0.5,
            "name": "test_avl.py::test1_insert[tree-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test1_insert[insert-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.875,
            "max_score": 0.875,
            "name": "test_avl.py::test1_insert[tree-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test2_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test2_insert[insert-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.5,
            "max_score": 0.5,
            "name": "test_avl.py::test2_insert[tree-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test2_insert[insert-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.5,
            "max_score": 0.5,
            "name": "test_avl.py::test2_insert[tree-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test2_insert[insert-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.875,
            "max_score": 0.875,
            "name": "test_avl.py::test2_insert[tree-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.375,
            "max_score": 0.375,
            "name": "test_avl.py::test3_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 3.375,
            "max_score": 3.375,
            "name": "test_avl.py::test3_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.375,
            "max_score": 0.375,
            "name": "test_avl.py::test4_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 3.375,
            "max_score": 3.375,
            "name": "test_avl.py::test4_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.375,
            "max_score": 0.375,
            "name": "test_avl.py::test5_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 3.375,
            "max_score": 3.375,
            "name": "test_avl.py::test5_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.375,
            "max_score": 0.375,
            "name": "test_avl.py::test6_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 3.375,
            "max_score": 3.375,
            "name": "test_avl.py::test6_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test7_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test7_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test8_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test8_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test9_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test9_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test10_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test10_insert[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-4]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-5]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-6]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-7]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-8]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.25,
            "max_score": 0.25,
            "name": "test_avl.py::test11_contains[contains-9]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test12_remove[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test12_remove[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test13_remove[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test13_remove[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test14_remove[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test14_remove[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.75,
            "max_score": 0.75,
            "name": "test_avl.py::test15_remove[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 6.75,
            "max_score": 6.75,
            "name": "test_avl.py::test15_remove[transformed-tree]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.3,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-7]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.5,
            "max_score": 0.5,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[tree-is-empty]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.5,
            "max_score": 0.5,
            "name": "test_avl.py::test17_remove_then_insert[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 2.25,
            "max_score": 2.25,
            "name": "test_avl.py::test17_remove_then_insert[tree-after-remove]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 2.25,
            "max_score": 2.25,
            "name": "test_avl.py::test17_remove_then_insert[tree-after-insert]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.175,
            "max_score": 0.175,
            "name": "test_avl.py::test18_size_and_clear[everything-else]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[insert-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[insert-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[insert-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[insert-4]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[insert-5]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[remove-1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[remove-2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-4]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[remove-3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-5]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.125,
            "max_score": 0.125,
            "name": "test_avl.py::test18_size_and_clear[remove-4]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-6]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-7]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.15,
            "name": "test_avl.py::test18_size_and_clear[size-8]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0.8861,
            "max_score": 1.0,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[everything-else]",
            "output": "\ngroup_name = 'everything-else'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           assert Observed (left) == Expected (right)\nE             --- Test 16 output ---                                                                                                       | --- Test 16 output ---                                                                                                      \nE                                                                                                                                          |                                                                                                                             \nE                                                                         10|5                                                             |                                                             10|5                                                            \nE                                                                                                                                          |                                                                                                                             \nE                                          6|4                                                            14|3                             |                              6|4                                                            14|3                            \nE                                                                                                                                          |                                                                                                                             \nE                          4|3                             8|2                            12|2                            16|2             |              4|3                             8|2                            12|2                            16|2            \nE                                                                                                                                          |                                                                                                                             \nE                  2|2             5|1             7|1                            11|1            13|1            15|1            17|1     |      2|2             5|1             7|1                            11|1            13|1            15|1            17|1    \nE                                                                                                                                          |                                                                                                                             \nE              1|1     3|1                                                                                                                 |  1|1     3|1                                                                                                                \nE                                                                                                                                          |                                                                                                                             \nE             tree.remove(10) = true                                                                                                       | tree.remove(10) = true                                                                                                      \nE                                                                                                                                          |                                                                                                                             \nE                                                                         11|5                                                             |                              8|4                                                                                            \nE                                                                                                                                          |                                                                                                                             \nE                                          6|4                                                            14|3                             |              4|3                            14|3                                                                            \nE                                                                                                                                          |                                                                                                                             \nE                          4|3                             8|2                            12|2                            16|2             |      2|2             6|2            12|2            16|2                                                                    \nE                                                                                                                                          |                                                                                                                             \nE                  2|2             5|1             7|1                                            13|1            15|1            17|1     |  1|1     3|1     5|1     7|1    11|1    13|1    15|1    17|1                                                                \nE                                                                                                                                          |                                                                                                                             \nE              1|1     3|1                                                                                                                 | root->value = 8                                                                                                             \nE                                                                                                                                          | tree.remove(8) = true                                                                                                       \nE             root->value = 11                                                                                                             |                                                                                                                             \nE             tree.remove(11) = true                                                                                                       | root->value = 7                                                                                                             \nE                                                                                                                                          | tree.remove(7) = true                                                                                                       \nE             root->value = 12                                                                                                             |                                                                                                                             \nE             tree.remove(12) = true                                                                                                       | root->value = 6                                                                                                             \nE                                                                                                                                          | tree.remove(6) = true                                                                                                       \nE             root->value = 13                                                                                                             |                                                                                                                             \nE             tree.remove(13) = true                                                                                                       | root->value = 5                                                                                                             \nE                                                                                                                                          | tree.remove(5) = true                                                                                                       \nE             root->value = 6                                                                                                              |                                                                                                                             \nE             tree.remove(6) = true                                                                                                        | root->value = 4                                                                                                             \nE                                                                                                                                          | tree.remove(4) = true                                                                                                       \nE             root->value = 7                                                                                                              |                                                                                                                             \nE             tree.remove(7) = true                                                                                                        | root->value = 3                                                                                                             \nE                                                                                                                                          | tree.remove(3) = true                                                                                                       \nE             root->value = 8                                                                                                              |                                                                                                                             \nE             tree.remove(8) = true                                                                                                        | root->value = 14                                                                                                            \nE                                                                                                                                          | tree.remove(14) = true                                                                                                      \nE             root->value = 14                                                                                                             |                                                                                                                             \nE             tree.remove(14) = true                                                                                                       | root->value = 13                                                                                                            \nE                                                                                                                                          | tree.remove(13) = true                                                                                                      \nE             root->value = 15                                                                                                             |                                                                                                                             \nE             tree.remove(15) = true                                                                                                       | root->value = 12                                                                                                            \nE                                                                                                                                          | tree.remove(12) = true                                                                                                      \nE             root->value = 4                                                                                                              |                                                                                                                             \nE             tree.remove(4) = true                                                                                                        | root->value = 11                                                                                                            \nE                                                                                                                                          | tree.remove(11) = true                                                                                                      \nE             root->value = 5                                                                                                              |                                                                                                                             \nE             tree.remove(5) = true                                                                                                        | root->value = 2                                                                                                             \nE                                                                                                                                          | tree.remove(2) = true                                                                                                       \nE             root->value = 16                                                                                                             |                                                                                                                             \nE             tree.remove(16) = true                                                                                                       | root->value = 16                                                                                                            \nE                                                                                                                                          | tree.remove(16) = true                                                                                                      \nE             root->value = 2                                                                                                              |                                                                                                                             \nE             tree.remove(2) = true                                                                                                        | root->value = 15                                                                                                            \nE                                                                                                                                          | tree.remove(15) = true                                                                                                      \nE             root->value = 3                                                                                                              |                                                                                                                             \nE             tree.remove(3) = true                                                                                                        | root->value = 1                                                                                                             \nE                                                                                                                                          | tree.remove(1) = true                                                                                                       \nE             root->value = 17                                                                                                             |                                                                                                                             \nE             tree.remove(17) = true                                                                                                       | root->value = 17                                                                                                            \nE                                                                                                                                          | tree.remove(17) = true                                                                                                      \nE             root->value = 1                                                                                                              |                                                                                                                             \nE             tree.remove(1) = true                                                                                                        | tree.size() = 0                                                                                                             \nE                                                                                                                                          |                                                                                                                             \nE             tree.size() = 0                                                                                                              |\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 1.8291,
            "max_score": 4.0,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[transformed-tree]",
            "output": "\ngroup_name = 'transformed-tree'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           assert Observed (left) == Expected (right)\nE                                                                         11|5                                                         |                              8|4                            \nE                                                                                                                                      |                                                             \nE                                          6|4                                                            14|3                         |              4|3                            14|3            \nE                                                                                                                                      |                                                             \nE                          4|3                             8|2                            12|2                            16|2         |      2|2             6|2            12|2            16|2    \nE                                                                                                                                      |                                                             \nE                  2|2             5|1             7|1                                            13|1            15|1            17|1 |  1|1     3|1     5|1     7|1    11|1    13|1    15|1    17|1\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-1]",
            "output": "\ngroup_name = 'root-1'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '11' == '8'\nE             - 8\nE             + 11\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-2]",
            "output": "\ngroup_name = 'root-2'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '12' == '7'\nE             - 7\nE             + 12\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-3]",
            "output": "\ngroup_name = 'root-3'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '13' == '6'\nE             - 6\nE             + 13\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-4]",
            "output": "\ngroup_name = 'root-4'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '6' == '5'\nE             - 5\nE             + 6\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-5]",
            "output": "\ngroup_name = 'root-5'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '7' == '4'\nE             - 4\nE             + 7\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-6]",
            "output": "\ngroup_name = 'root-6'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '8' == '3'\nE             - 3\nE             + 8\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-8]",
            "output": "\ngroup_name = 'root-8'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '15' == '13'\nE             - 13\nE             + 15\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-9]",
            "output": "\ngroup_name = 'root-9'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '4' == '12'\nE             - 12\nE             + 4\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-10]",
            "output": "\ngroup_name = 'root-10'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '5' == '11'\nE             - 11\nE             + 5\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-11]",
            "output": "\ngroup_name = 'root-11'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '16' == '2'\nE             - 2\nE             + 16\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-12]",
            "output": "\ngroup_name = 'root-12'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '2' == '16'\nE             - 16\nE             + 2\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.0,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-13]",
            "output": "\ngroup_name = 'root-13'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '3' == '15'\nE             - 15\nE             + 3\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-14]",
            "output": "\ngroup_name = 'root-14'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '17' == '1'\nE             - 1\nE             + 17\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0.15,
            "max_score": 0.3,
            "name": "test_avl.py::test16_repeatedly_remove_root_node[root-15]",
            "output": "\ngroup_name = 'root-15'\n\n    def new_func(group_name):\n        group_stat = group_stats[group_name]\n        if not group_stat['passed']:\n>           assert group_stat['observed'] == group_stat['expected']\nE           AssertionError: assert '1' == '17'\nE             - 17\nE             + 1\n\n/opt/homebrew/lib/python3.11/site-packages/byu_pytest_utils/dialog.py:31: AssertionError",
            "visibility": "visible"
        }
    ]
}